import { createSignal, Show, type JSX, For } from "solid-js";

interface Props {
  qrCode: string;
  secretCode: string;
  codes: string[];
}

const TwoFactorForm = ({ qrCode, secretCode, codes }: Props) => {
  const [showSecret, setShowSecret] = createSignal(false);
  const [loading, setLoading] = createSignal(false);
  const [msg, setMsg] = createSignal("");
  const [recoveryCodes, setRecoveryCodes] = createSignal<string[]>(codes);
  const [success, setSuccess] = createSignal(false);

  const handleSubmit: JSX.EventHandlerUnion<
    HTMLFormElement,
    SubmitEvent
  > = async (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);

    const enteredCode = formData.get("enteredCode");

    try {
      setLoading(true);
      setMsg("");
      setRecoveryCodes([]);
      setSuccess(false);

      const res = await fetch("/api/auth/set-two-factor", {
        method: "POST",
        body: JSON.stringify({ enteredCode, secretCode }),
      });

      const resData = await res.json();

      if (res.status !== 200) {
        setMsg(resData.message);
      } else {
        setSuccess(true);
        setRecoveryCodes(resData.data.codes);
        setMsg(
          "MultiFactor (2-FA) Integration Success. Save the recovery codes"
        );
      }
    } catch (error) {
      setMsg("Server Error. Please try again later.");
    } finally {
      setLoading(false);
    }
  };
  const handleDownload = async () => {
    // await fetch("/api/auth/download-recovery-codes");
  };
  return (
    <div>
      <h2 class="text-2xl  font-bold my-2">Step 1: Set up</h2>
      <div class="flex flex-wrap h-full flex-col md:flex-row  justify-between border-2 ">
        <div class="flex-1 items-center flex flex-col justify-center">
          <h3 class="my-2 text-xl font-semibold">Scan the qr code</h3>
          <img src={qrCode} />
        </div>
        <div class="flex flex-col flex-1 h-auto items-center justify-center border-l-2">
          {showSecret() ? (
            <p class="font-bold">{secretCode}</p>
          ) : (
            <p>Can't scan? Set up with code</p>
          )}
          <button
            onClick={() => setShowSecret((prev) => !prev)}
            class="bg-blue-700 text-white px-5 my-2 text-sm py-2 rounded-md "
          >
            {showSecret() ? "Hide Code" : "Display Code"}
          </button>
        </div>
      </div>

      <h2 class="text-2xl font-bold mt-5 mb-2">Step 2: Enter Code</h2>
      <form
        onSubmit={handleSubmit}
        class="md:w-1/2 my-4 w-full flex flex-col gap-2 md:flex-row mx-auto"
      >
        <input
          name="enteredCode"
          class="bg-transparent border-2 border-gray-700 md:w-3/4 w-full rounded-md px-2 py-2"
          type="text"
          required
          placeholder="Enter 6 digit code generated by your app"
        />

        <button
          type="submit"
          disabled={loading()}
          class="bg-blue-700 text-white text-sm rounded-md px-3 py-2 flex items-center justify-center gap-2"
        >
          <Show when={loading()}>
            <img src="/spinner.svg" class="animate-spin fill-white mr-2" />{" "}
            Verifying...
          </Show>
          <Show when={!loading()}>Verify</Show>
        </button>
      </form>

      <div class="flex items-center justify-center w-full">
        {msg() && (
          <p
            class={` ${
              success() ? "bg-green-600" : "bg-red-600"
            } my-5 rounded-md w-fit px-2 py-2  text-white`}
          >
            {msg()}
          </p>
        )}
      </div>

      <h2 class="text-2xl  font-bold my-2">Step 3: Recovery Codes</h2>

      <div class="mb-5">
        <Show when={recoveryCodes().length < 1}>
          <p>Submit the form above to get the recovery codes.</p>
        </Show>

        <Show when={recoveryCodes().length > 0}>
          <div class="flex items-center justify-between md:justify-start gap-3 flex-wrap">
            <p class="text-xl font-bold">Store these codes in secure place</p>
            <a
              href="/api/auth/download-recovery-codes"
              class="bg-blue-700 text-white rounded-md px-3 py-1"
            >
              Download Code
            </a>
          </div>
        </Show>
        <Show when={recoveryCodes().length > 0}>
          <div class="flex flex-col gap-2 my-3">
            <For each={recoveryCodes()}>
              {(codes) => <p class="block">{codes}</p>}
            </For>
          </div>
        </Show>
      </div>
    </div>
  );
};

export default TwoFactorForm;
